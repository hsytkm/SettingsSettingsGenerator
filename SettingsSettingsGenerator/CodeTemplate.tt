<#@ template debug="false" hostspecific="false" language="C#" linePragmas="false" #>
<#@ assembly name="System.Core" #>
<#@ import namespace="System.Linq" #>
<#@ import namespace="System.Text" #>
<#@ import namespace="System.Collections.Generic" #>
// <auto-generated>
// THIS (.cs) FILE IS GENERATED. DO NOT CHANGE IT.
// </auto-generated>
#nullable enable

<# if (!string.IsNullOrEmpty(Namespace)) { #>
namespace <#= Namespace #>
<# } #>
{
    partial class <#= ClassName #> : global::System.ComponentModel.INotifyPropertyChanged
    {
        // 設定値変化の有無を管理しているフラグです
        private bool _isChanged;

<# foreach (var item in AttributeFieldSources) { #>
        // Created from <#= GetBackingFieldName(item) #>
        public <#= GetFieldTypeFullName(item) #> <#= GetPropertyName(item) #>
        {
            get
            {
                <#= GetBackingFieldName(item) #> ??= <#= GetOptionKey(item) #>;
                return <#= GetBackingFieldValue(item) #>;
            }
            set
            {
                <#= GetBackingFieldName(item) #> ??= <#= GetOptionKey(item) #>;
                SetProperty(ref <#= GetBackingFieldName(item) #>, value);
            }
        }

<# } #>
        /// <summary>
        /// 現在の設定を *.settings に書き込みます
        /// </summary>
        public void Save()
        {
            if (!_isChanged) return;

            // アプリで値を更新した場合に値を書き戻します
<# foreach (var item in AttributeFieldSources) { #>
            if (<#= GetBackingFieldName(item) #> != null) {
                <#= GetOptionKey(item) #> = <#= GetBackingFieldValue(item) #>;
            }
<# } #>

            <#= SettingsClassName #>.Default.Save();
            _isChanged = false;
        }

        public event global::System.ComponentModel.PropertyChangedEventHandler? PropertyChanged;

        private bool SetProperty<T>(ref T field, T value, [global::System.Runtime.CompilerServices.CallerMemberName] string propertyName = "")
        {
            if (global::System.Collections.Generic.EqualityComparer<T>.Default.Equals(field, value))
                return false;

            field = value;
            _isChanged = true;

            PropertyChanged?.Invoke(this, new global::System.ComponentModel.PropertyChangedEventArgs(propertyName));
            return true;
        }
    }
}
