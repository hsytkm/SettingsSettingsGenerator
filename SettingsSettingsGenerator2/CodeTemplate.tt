<#@ template debug="false" hostspecific="false" language="C#" linePragmas="false" #>
<#@ assembly name="System.Core" #>
<#@ import namespace="System.Linq" #>
<#@ import namespace="System.Text" #>
<#@ import namespace="System.Collections.Generic" #>
// <auto-generated>
// THIS (.cs) FILE IS GENERATED USING IIncrementalGenerator. DO NOT CHANGE IT.
// </auto-generated>
#nullable enable

<# if (!string.IsNullOrEmpty(Namespace)) { #>
namespace <#= Namespace #>
<# } #>
{
    [global::System.CodeDom.Compiler.GeneratedCode("<#= GenerateHelper.GeneratorName #>", "<#= GenerateHelper.GeneratorVersion #>")]
    [global::System.Diagnostics.CodeAnalysis.ExcludeFromCodeCoverage]
    partial class <#= ClassName #> : global::System.ComponentModel.INotifyPropertyChanged
    {
<# foreach (var item in AttributeFieldSources) { #>
        /// <summary>
        /// Property of <#= GetOptionKey(item) #>.
        /// </summary>
        public <#= GetFieldTypeFullName(item) #> <#= GetPropertyName(item) #>
        {
            // Created from <#= GetBackingFieldName(item) #>
            get
            {
                <#= GetBackingFieldName(item) #> ??= <#= GetOptionKey(item) #>;
                return <#= GetBackingFieldValue(item) #>;
            }
            set
            {
                <#= GetBackingFieldName(item) #> ??= <#= GetOptionKey(item) #>;
                SetProperty(ref <#= GetBackingFieldName(item) #>, value);
            }
        }

<# } #>
        // whether or not value has changed.
        bool _isChanged;

        /// <summary>
        /// Write the current configuration to *.settings.
        /// </summary>
        public void Save()
        {
            if (!_isChanged)
                return;

            // Write back the value if you update the value in your app.
<# foreach (var item in AttributeFieldSources) { #>
            if (<#= GetBackingFieldName(item) #> != null) {
                <#= GetOptionKey(item) #> = <#= GetBackingFieldValue(item) #>;
            }
<# } #>

            <#= SettingsClassName #>.Default.Save();
            _isChanged = false;
        }

        public event global::System.ComponentModel.PropertyChangedEventHandler? PropertyChanged;

        bool SetProperty<T>(ref T field, T value, [global::System.Runtime.CompilerServices.CallerMemberName] string propertyName = "")
        {
            if (global::System.Collections.Generic.EqualityComparer<T>.Default.Equals(field, value))
                return false;

            field = value;
            _isChanged = true;

            NotifyPropertyChanged(propertyName);
            return true;
        }

        void NotifyPropertyChanged([global::System.Runtime.CompilerServices.CallerMemberName] string propertyName = "")
        {
            PropertyChanged?.Invoke(this, new global::System.ComponentModel.PropertyChangedEventArgs(propertyName));
        }
    }
}
